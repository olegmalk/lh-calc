// Enum values and field metadata will be fetched dynamically from API
let ENUM_VALUES = {};
let FIELD_METADATA = {};

// Field configuration - single source of truth
const FIELD_CONFIG = {
    technolog: {
        title: 'üîß –í–∫–ª–∞–¥–∫–∞ "–¢–µ—Ö–Ω–æ–ª–æ–≥" - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∞',
        fields: [
            { id: 'tech_D27_sequenceNumber', label: 'D27 - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä', type: 'number', default: 1001 },
            { id: 'tech_E27_customerOrderPosition', label: 'E27 - –ü–æ–∑–∏—Ü–∏—è –≤ –û–õ –ó–∞–∫–∞–∑—á–∏–∫–∞', type: 'text', default: '–ï-113' },
            { id: 'tech_F27_deliveryType', label: 'F27 - –¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏', type: 'text', default: '–¶–µ–ª—ã–π –¢–ê' },
            { id: 'tech_G27_sizeTypeK4', label: 'G27 - –¢–∏–ø–æ—Ä–∞–∑–º–µ—Ä –ö4', type: 'text', default: '–ö4-750' },
            { id: 'tech_H27_passes', label: 'H27 - –•–æ–¥—ã', type: 'text', default: '1/6' },
            { id: 'tech_I27_plateQuantity', label: 'I27 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Å—Ç–∏–Ω', type: 'number', default: 401 },
            { id: 'tech_J27_calcPressureHotSide', label: 'J27 - –î–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä. —Å—Ç–æ—Ä–æ–Ω–∞', type: 'number', default: 22 },
            { id: 'tech_K27_calcPressureColdSide', label: 'K27 - –î–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–ª. —Å—Ç–æ—Ä–æ–Ω–∞', type: 'number', default: 23 },
            { id: 'tech_L27_calcTempHotSide', label: 'L27 - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä. —Å—Ç–æ—Ä–æ–Ω–∞', type: 'number', default: 101 },
            { id: 'tech_M27_calcTempColdSide', label: 'M27 - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ö–æ–ª. —Å—Ç–æ—Ä–æ–Ω–∞', type: 'number', default: 102 },
            { id: 'tech_P27_plateMaterial', label: 'P27 - –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–ª–∞—Å—Ç–∏–Ω', type: 'text', default: 'AISI 316L' },
            { id: 'tech_Q27_materialType', label: 'Q27 - –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞', type: 'text', default: 'AISI 316L' },
            { id: 'tech_R27_bodyMaterial', label: 'R27 - –ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞', type: 'text', default: '09–ì2–°' },
            { id: 'tech_S27_plateSurfaceType', label: 'S27 - –¢–∏–ø –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø–ª–∞—Å—Ç–∏–Ω', type: 'text', default: '–≥–æ—Ñ—Ä–∞' },
            { id: 'tech_T27_drawDepth', label: 'T27 - –ì–ª—É–±–∏–Ω–∞ –≤—ã—Ç—è–∂–∫–∏, –º–º', type: 'number', default: 5 },
            { id: 'tech_U27_plateThickness', label: 'U27 - –¢–æ–ª—â–∏–Ω–∞ –ø–ª–∞—Å—Ç–∏–Ω—ã, –º–º', type: 'number', default: 1 },
            { id: 'tech_V27_claddingThickness', label: 'V27 - –¢–æ–ª—â–∏–Ω–∞ –ø–ª–∞–∫–∏—Ä–æ–≤–∫–∏, –º–º', type: 'number', default: 3 }
        ]
    },
    snabzhenie: {
        title: 'üí∞ –í–∫–ª–∞–¥–∫–∞ "–°–Ω–∞–±–∂–µ–Ω–∏–µ" - –¶–µ–Ω—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        fields: [
            { id: 'sup_F2_projectNumber', label: 'F2 - –ù–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞', type: 'text', default: '' },
            { id: 'sup_D8_flowPartMaterialPricePerKg', label: 'D8 - –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–æ—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏', type: 'number', default: 701 },
            { id: 'sup_E8_flowPartMaterialPrice', label: 'E8 - –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø—Ä–æ—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏', type: 'number', default: 702 },
            { id: 'sup_D9_bodyMaterial', label: 'D9 - –ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞', type: 'select',
              enumField: true, default: '09–ì2–°' },
            { id: 'sup_D10_columnCoverMaterialPrice', label: 'D10 - –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫–æ–ª–æ–Ω–Ω/–∫—Ä—ã—à–µ–∫', type: 'number', default: 1010 },
            { id: 'sup_D11_panelMaterialPrice', label: 'D11 - –¶–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–∞–Ω–µ–ª–µ–π', type: 'number', default: 1011 },
            { id: 'sup_K13_normHoursPerUnit', label: 'K13 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–æ—á–∞—Å–æ–≤', type: 'number', default: 1 },
            { id: 'sup_P13_internalLogistics', label: 'P13 - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞', type: 'number', default: 120013 },
            { id: 'sup_D17_panelCuttingCoefficient', label: 'D17 - –ü–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞—Å–∫—Ä–æ–π –ø–∞–Ω–µ–ª–µ–π', type: 'number', default: 1017 },
            { id: 'sup_D78_stainlessSteelThickness', label: 'D78 - –¢–æ–ª—â–∏–Ω–∞ –Ω–µ—Ä–∂–∞–≤–µ–π–∫–∏, –º–º', type: 'number', default: 3 },
            { id: 'sup_E19_coverRolledThickness', label: 'E19 - –¢–æ–ª—â–∏–Ω–∞ –ø—Ä–æ–∫–∞—Ç–∞ –∫—Ä—ã—à–∫–∏', type: 'number', default: 1019 },
            { id: 'sup_E20_coverCuttingPrice', label: 'E20 - –¶–µ–Ω–∞ —Ä–∞—Å–∫—Ä–æ—è –∫—Ä—ã—à–∫–∏', type: 'number', default: 1020 },
            { id: 'sup_E21_coverProcessingCost', label: 'E21 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—ã—à–∫–∏', type: 'number', default: 1021 },
            { id: 'sup_E25_panelRolledThickness', label: 'E25 - –¢–æ–ª—â–∏–Ω–∞ –ø—Ä–æ–∫–∞—Ç–∞ –ø–∞–Ω–µ–ª–∏', type: 'number', default: 1025 },
            { id: 'sup_E26_panelCuttingPrice', label: 'E26 - –¶–µ–Ω–∞ —Ä–∞—Å–∫—Ä–æ—è –ø–∞–Ω–µ–ª–∏', type: 'number', default: 1026 },
            { id: 'sup_E27_panelProcessingCost', label: 'E27 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–µ–ª–∏', type: 'number', default: 1027 },
            { id: 'sup_F28_flange1PanelAPrice', label: 'F28 - –¶–µ–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞ ‚Ññ1 –ø–∞–Ω–µ–ª—å –ê', type: 'number', default: 1028 },
            { id: 'sup_F29_flange2PanelAPrice', label: 'F29 - –¶–µ–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞ ‚Ññ2 –ø–∞–Ω–µ–ª—å –ê', type: 'number', default: 1029 },
            { id: 'sup_F30_pipeBilletFlange1Price', label: 'F30 - –¶–µ–Ω–∞ —Ç—Ä—É–±—ã –ø–æ–¥ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1', type: 'number', default: 1030 },
            { id: 'sup_F31_pipeBilletFlange2Price', label: 'F31 - –¶–µ–Ω–∞ —Ç—Ä—É–±—ã –ø–æ–¥ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2', type: 'number', default: 1031 },
            { id: 'sup_F32_drainageNozzlePrice', label: 'F32 - –¶–µ–Ω–∞ –ø–∞—Ç—Ä—É–±–∫–∞ –¥—Ä–µ–Ω–∞–∂–∞', type: 'number', default: 1032 },
            { id: 'sup_F33_ventilationNozzlePrice', label: 'F33 - –¶–µ–Ω–∞ –ø–∞—Ç—Ä—É–±–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', type: 'number', default: 1033 },
            { id: 'sup_F39_spareKitsPressureReserve', label: 'F39 - –ó–∞–ø–∞—Å–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã —Ä–µ–∑–µ—Ä–≤', type: 'select', 
              enumField: true, default: '2' },
            { id: 'sup_D38_panelGasketsPrice', label: 'D38 - –¶–µ–Ω–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –ø–∞–Ω–µ–ª–µ–π', type: 'number', default: 1038 },
            { id: 'sup_D43_studM24x2000Price', label: 'D43 - –¶–µ–Ω–∞ —à–ø–∏–ª—å–∫–∏ –ú24—Ö2000', type: 'number', default: 3301 },
            { id: 'sup_D44_studM24x1000Price', label: 'D44 - –¶–µ–Ω–∞ —à–ø–∏–ª—å–∫–∏ –ú24—Ö1000', type: 'number', default: 1751 },
            { id: 'sup_D45_studM20x2000Price', label: 'D45 - –¶–µ–Ω–∞ —à–ø–∏–ª—å–∫–∏ –ú20—Ö2000', type: 'number', default: 2801 },
            { id: 'sup_D46_studM20M16x1000Price', label: 'D46 - –¶–µ–Ω–∞ —à–ø–∏–ª—å–∫–∏ –ú20/–ú16—Ö1000', type: 'number', default: 1201 },
            { id: 'sup_G43_nutM24DIN6330Price', label: 'G43 - –¶–µ–Ω–∞ –≥–∞–π–∫–∏ –ú24 DIN6330', type: 'number', default: 2043 },
            { id: 'sup_G44_nutM24DIN933Price', label: 'G44 - –¶–µ–Ω–∞ –≥–∞–π–∫–∏ –ú24 DIN933', type: 'number', default: 2044 },
            { id: 'sup_G45_nutM20M16DIN933Price', label: 'G45 - –¶–µ–Ω–∞ –≥–∞–π–∫–∏ –ú20/–ú16 DIN933', type: 'number', default: 2045 },
            { id: 'sup_H54_spareFlangeFlange1Price', label: 'H54 - –ó–ò–ü –∫—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1', type: 'number', default: 2054 },
            { id: 'sup_H55_spareFlangeFlange2Price', label: 'H55 - –ó–ò–ü –∫—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2', type: 'number', default: 2055 },
            { id: 'sup_H56_spareFlangeFlange3Price', label: 'H56 - –ó–ò–ü –∫—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3', type: 'number', default: 2056 },
            { id: 'sup_H57_spareFlangeFlange4Price', label: 'H57 - –ó–ò–ü –∫—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4', type: 'number', default: 2057 },
            { id: 'sup_I28_panelBFlange3Pressure', label: 'I28 - –ü–∞–Ω–µ–ª—å –ë —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3 –¥–∞–≤–ª–µ–Ω–∏–µ', type: 'number', default: 2028 },
            { id: 'sup_I29_panelBFlange4Pressure', label: 'I29 - –ü–∞–Ω–µ–ª—å –ë —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4 –¥–∞–≤–ª–µ–Ω–∏–µ', type: 'number', default: 2029 },
            { id: 'sup_I38_eyeboltKitMaterialCost', label: 'I38 - –ü—Ä–æ—É—à–∏–Ω—ã –º–µ—Ç–∞–ª–ª', type: 'number', default: 2038 },
            { id: 'sup_I39_eyeboltKitProcessingCost', label: 'I39 - –ü—Ä–æ—É—à–∏–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞', type: 'number', default: 2039 },
            { id: 'sup_I44_otherMaterialsDesc1', label: 'I44 - –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã 1', type: 'textarea', default: '' },
            { id: 'sup_I45_otherMaterialsDesc2', label: 'I45 - –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã 2', type: 'textarea', default: '' },
            { id: 'sup_I46_otherMaterialsDesc3', label: 'I46 - –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã 3', type: 'textarea', default: '' },
            { id: 'sup_I50_sparePanelStudQuantity', label: 'I50 - –ó–ò–ü —à–ø–∏–ª—å–∫–∞ –∫–æ–ª-–≤–æ', type: 'number', default: 2050 },
            { id: 'sup_I51_sparePanelNutQuantity', label: 'I51 - –ó–ò–ü –≥–∞–π–∫–∞ –∫–æ–ª-–≤–æ', type: 'number', default: 2051 },
            { id: 'sup_I52_sparePanelWasherQuantity', label: 'I52 - –ó–ò–ü —à–∞–π–±–∞ –∫–æ–ª-–≤–æ', type: 'number', default: 2052 },
            { id: 'sup_I54_flangeFastenersFlange1Quantity', label: 'I54 - –ö—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1 –∫–æ–ª-–≤–æ', type: 'number', default: 2054 },
            { id: 'sup_I55_flangeFastenersFlange2Quantity', label: 'I55 - –ö—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2 –∫–æ–ª-–≤–æ', type: 'number', default: 2055 },
            { id: 'sup_I56_flangeFastenersFlange3Quantity', label: 'I56 - –ö—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3 –∫–æ–ª-–≤–æ', type: 'number', default: 2056 },
            { id: 'sup_I57_flangeFastenersFlange4Quantity', label: 'I57 - –ö—Ä–µ–ø–µ–∂ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4 –∫–æ–ª-–≤–æ', type: 'number', default: 2057 },
            { id: 'sup_J28_panelBFlange3Diameter', label: 'J28 - –ü–∞–Ω–µ–ª—å –ë —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3 –¥–∏–∞–º–µ—Ç—Ä', type: 'number', default: 3028 },
            { id: 'sup_J29_panelBFlange4Diameter', label: 'J29 - –ü–∞–Ω–µ–ª—å –ë —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4 –¥–∏–∞–º–µ—Ç—Ä', type: 'number', default: 3029 },
            { id: 'sup_K19_columnRolledThickness', label: 'K19 - –¢–æ–ª—â–∏–Ω–∞ –ø—Ä–æ–∫–∞—Ç–∞ –∫–æ–ª–æ–Ω–Ω—ã', type: 'number', default: 3019 },
            { id: 'sup_K20_columnCuttingPrice', label: 'K20 - –¶–µ–Ω–∞ —Ä–∞—Å–∫—Ä–æ—è –∫–æ–ª–æ–Ω–Ω—ã', type: 'number', default: 3020 },
            { id: 'sup_K21_columnProcessingCost', label: 'K21 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–Ω—ã', type: 'number', default: 3021 },
            { id: 'sup_K25_panelBRolledThickness', label: 'K25 - –¢–æ–ª—â–∏–Ω–∞ –ø—Ä–æ–∫–∞—Ç–∞ –ø–∞–Ω–µ–ª—å –ë', type: 'number', default: 3025 },
            { id: 'sup_K26_panelBCuttingPrice', label: 'K26 - –¶–µ–Ω–∞ —Ä–∞—Å–∫—Ä–æ—è –ø–∞–Ω–µ–ª—å –ë', type: 'number', default: 3026 },
            { id: 'sup_K27_panelBProcessingCost', label: 'K27 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–µ–ª—å –ë', type: 'number', default: 3027 },
            { id: 'sup_K38_supportsKitMaterialCost', label: 'K38 - –õ–∞–ø—ã –º–µ—Ç–∞–ª–ª', type: 'number', default: 3038 },
            { id: 'sup_K39_supportsKitProcessingCost', label: 'K39 - –õ–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞', type: 'number', default: 3039 },
            { id: 'sup_L28_panelBFlange3Price', label: 'L28 - –¶–µ–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞ ‚Ññ3 –ø–∞–Ω–µ–ª—å –ë', type: 'number', default: 4028 },
            { id: 'sup_L29_panelBFlange4Price', label: 'L29 - –¶–µ–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞ ‚Ññ4 –ø–∞–Ω–µ–ª—å –ë', type: 'number', default: 4029 },
            { id: 'sup_L30_panelBPipeBilletFlange3Price', label: 'L30 - –¶–µ–Ω–∞ —Ç—Ä—É–±—ã –ø–æ–¥ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3', type: 'number', default: 4030 },
            { id: 'sup_L31_panelBPipeBilletFlange4Price', label: 'L31 - –¶–µ–Ω–∞ —Ç—Ä—É–±—ã –ø–æ–¥ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4', type: 'number', default: 4031 },
            { id: 'sup_L32_panelBDrainageNozzlePrice', label: 'L32 - –¶–µ–Ω–∞ –ø–∞—Ç—Ä—É–±–∫–∞ –¥—Ä–µ–Ω–∞–∂–∞ –ø–∞–Ω–µ–ª—å –ë', type: 'number', default: 4032 },
            { id: 'sup_L33_panelBVentilationNozzlePrice', label: 'L33 - –¶–µ–Ω–∞ –ø–∞—Ç—Ä—É–±–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –ø–∞–Ω–µ–ª—å –ë', type: 'number', default: 4033 },
            { id: 'sup_M38_bracesKitMaterialCost', label: 'M38 - –†–∞—Å–∫–æ—Å—ã –º–µ—Ç–∞–ª–ª', type: 'number', default: 5038 },
            { id: 'sup_M39_bracesKitProcessingCost', label: 'M39 - –†–∞—Å–∫–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞', type: 'number', default: 5039 },
            { id: 'sup_M44_otherMaterialsCost1', label: 'M44 - –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ 1', type: 'number', default: 5044 },
            { id: 'sup_M45_otherMaterialsCost2', label: 'M45 - –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ 2', type: 'number', default: 5045 },
            { id: 'sup_M46_otherMaterialsCost3', label: 'M46 - –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ 3', type: 'number', default: 5046 },
            { id: 'sup_M51_spareAnchorBoltsCost', label: 'M51 - –ó–ò–ü –∞–Ω–∫–µ—Ä–Ω—ã–µ –±–æ–ª—Ç—ã —Ü–µ–Ω–∞', type: 'number', default: 5051 },
            { id: 'sup_M52_spareOtherCost', label: 'M52 - –ó–ò–ü –¥—Ä—É–≥–æ–µ —Ü–µ–Ω–∞', type: 'number', default: 5052 },
            { id: 'sup_N50_sparePanelGasketsQuantity', label: 'N50 - –ó–ò–ü –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –ø–∞–Ω–µ–ª–µ–π –∫–æ–ª-–≤–æ', type: 'number', default: 6050 },
            { id: 'sup_N51_spareAnchorBoltsQuantity', label: 'N51 - –ó–ò–ü –∞–Ω–∫–µ—Ä–Ω—ã–µ –±–æ–ª—Ç—ã –∫–æ–ª-–≤–æ', type: 'number', default: 6051 },
            { id: 'sup_N52_spareOtherQuantity', label: 'N52 - –ó–ò–ü –¥—Ä—É–≥–æ–µ –∫–æ–ª-–≤–æ', type: 'number', default: 6052 },
            { id: 'sup_N54_spareFlangeGasketsFlange1Quantity', label: 'N54 - –ó–ò–ü –ø—Ä–æ–∫–ª–∞–¥–∫–∏ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1', type: 'number', default: 6054 },
            { id: 'sup_N55_spareFlangeGasketsFlange2Quantity', label: 'N55 - –ó–ò–ü –ø—Ä–æ–∫–ª–∞–¥–∫–∏ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2', type: 'number', default: 6055 },
            { id: 'sup_N56_spareFlangeGasketsFlange3Quantity', label: 'N56 - –ó–ò–ü –ø—Ä–æ–∫–ª–∞–¥–∫–∏ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3', type: 'number', default: 6056 },
            { id: 'sup_N57_spareFlangeGasketsFlange4Quantity', label: 'N57 - –ó–ò–ü –ø—Ä–æ–∫–ª–∞–¥–∫–∏ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4', type: 'number', default: 6057 },
            { id: 'sup_P19_panelFastenersQuantity', label: 'P19 - –ö—Ä–µ–ø–µ–∂ –ø–∞–Ω–µ–ª–µ–π –∫–æ–ª-–≤–æ', type: 'number', default: 7019 },
            { id: 'sup_P20_panelFastenersMaterial', label: 'P20 - –ö—Ä–µ–ø–µ–∂ –ø–∞–Ω–µ–ª–µ–π –º–∞—Ç–µ—Ä–∏–∞–ª', type: 'text', default: '40–•' },
            { id: 'sup_P21_panelFastenersCoating', label: 'P21 - –ö—Ä–µ–ø–µ–∂ –ø–∞–Ω–µ–ª–µ–π –ø–æ–∫—Ä—ã—Ç–∏–µ', type: 'text', default: 'Zn-Cr 9–º–∫–º' },
            { id: 'sup_P22_panelFastenersStudSize', label: 'P22 - –ö—Ä–µ–ø–µ–∂ –ø–∞–Ω–µ–ª–µ–π —Ä–∞–∑–º–µ—Ä', type: 'text', default: '–ú33' },
            { id: 'sup_P29_cofFastenersFlange1Size', label: 'P29 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1 —Ä–∞–∑–º–µ—Ä', type: 'text', default: '–ú18' },
            { id: 'sup_P33_cofFastenersFlange2Size', label: 'P33 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2 —Ä–∞–∑–º–µ—Ä', type: 'text', default: '–ú18' },
            { id: 'sup_P37_cofFastenersFlange3Size', label: 'P37 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3 —Ä–∞–∑–º–µ—Ä', type: 'text', default: '–ú18' },
            { id: 'sup_P41_cofFastenersFlange4Size', label: 'P41 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4 —Ä–∞–∑–º–µ—Ä', type: 'text', default: '–ú18' },
            { id: 'sup_P45_unaccountedCost', label: 'P45 - –ù–µ—É—á—Ç–µ–Ω–∫–∞', type: 'number', default: 7045 },
            { id: 'sup_Q22_panelFastenersStudCost', label: 'Q22 - –ö—Ä–µ–ø–µ–∂ –ø–∞–Ω–µ–ª–µ–π —à–ø–∏–ª—å–∫–∞ —Ü–µ–Ω–∞', type: 'number', default: 8022 },
            { id: 'sup_Q23_panelFastenersNutCost', label: 'Q23 - –ö—Ä–µ–ø–µ–∂ –ø–∞–Ω–µ–ª–µ–π –≥–∞–π–∫–∞ —Ü–µ–Ω–∞', type: 'number', default: 8023 },
            { id: 'sup_Q24_panelFastenersWasherCost', label: 'Q24 - –ö—Ä–µ–ø–µ–∂ –ø–∞–Ω–µ–ª–µ–π —à–∞–π–±–∞ —Ü–µ–Ω–∞', type: 'number', default: 8024 },
            { id: 'sup_Q29_cofFastenersFlange1Material', label: 'Q29 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1 –º–∞—Ç–µ—Ä–∏–∞–ª', type: 'text', default: '—Å—Ç40–•' },
            { id: 'sup_Q33_cofFastenersFlange2Material', label: 'Q33 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2 –º–∞—Ç–µ—Ä–∏–∞–ª', type: 'text', default: '—Å—Ç40–•' },
            { id: 'sup_Q37_cofFastenersFlange3Material', label: 'Q37 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3 –º–∞—Ç–µ—Ä–∏–∞–ª', type: 'text', default: '—Å—Ç40–•' },
            { id: 'sup_Q41_cofFastenersFlange4Material', label: 'Q41 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4 –º–∞—Ç–µ—Ä–∏–∞–ª', type: 'text', default: '—Å—Ç40–•' },
            { id: 'sup_R29_cofFastenersFlange1Coating', label: 'R29 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1 –ø–æ–∫—Ä—ã—Ç–∏–µ', type: 'text', default: 'Zn-Cr 9–º–∫–º' },
            { id: 'sup_R33_cofFastenersFlange2Coating', label: 'R33 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2 –ø–æ–∫—Ä—ã—Ç–∏–µ', type: 'text', default: 'Zn-Cr 9–º–∫–º' },
            { id: 'sup_R37_cofFastenersFlange3Coating', label: 'R37 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3 –ø–æ–∫—Ä—ã—Ç–∏–µ', type: 'text', default: 'Zn-Cr 9–º–∫–º' },
            { id: 'sup_R41_cofFastenersFlange4Coating', label: 'R41 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4 –ø–æ–∫—Ä—ã—Ç–∏–µ', type: 'text', default: 'Zn-Cr 9–º–∫–º' },
            { id: 'sup_T29_cofFastenersFlange1KitPrice', label: 'T29 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1 –∫–æ–º–ø–ª–µ–∫—Ç', type: 'number', default: 10029 },
            { id: 'sup_T30_cofGasketFlange1Price', label: 'T30 - –ö–û–§ –ø—Ä–æ–∫–ª–∞–¥–∫–∞ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1', type: 'number', default: 10030 },
            { id: 'sup_T31_cofObturatorFlange1Price', label: 'T31 - –ö–û–§ –æ–±—Ç—é—Ä–∞—Ç–æ—Ä —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1', type: 'number', default: 10031 },
            { id: 'sup_T33_cofFastenersFlange2KitPrice', label: 'T33 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2 –∫–æ–º–ø–ª–µ–∫—Ç', type: 'number', default: 10033 },
            { id: 'sup_T34_cofGasketFlange2Price', label: 'T34 - –ö–û–§ –ø—Ä–æ–∫–ª–∞–¥–∫–∞ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2', type: 'number', default: 10034 },
            { id: 'sup_T35_cofObturatorFlange2Price', label: 'T35 - –ö–û–§ –æ–±—Ç—é—Ä–∞—Ç–æ—Ä —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2', type: 'number', default: 10035 },
            { id: 'sup_T37_cofFastenersFlange3KitPrice', label: 'T37 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3 –∫–æ–º–ø–ª–µ–∫—Ç', type: 'number', default: 10037 },
            { id: 'sup_T38_cofGasketFlange3Price', label: 'T38 - –ö–û–§ –ø—Ä–æ–∫–ª–∞–¥–∫–∞ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3', type: 'number', default: 10038 },
            { id: 'sup_T39_cofObturatorFlange3Price', label: 'T39 - –ö–û–§ –æ–±—Ç—é—Ä–∞—Ç–æ—Ä —Ñ–ª–∞–Ω–µ—Ü ‚Ññ3', type: 'number', default: 10039 },
            { id: 'sup_T41_cofFastenersFlange4KitPrice', label: 'T41 - –ö–û–§ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4 –∫–æ–º–ø–ª–µ–∫—Ç', type: 'number', default: 10041 },
            { id: 'sup_T42_cofGasketFlange4Price', label: 'T42 - –ö–û–§ –ø—Ä–æ–∫–ª–∞–¥–∫–∞ —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4', type: 'number', default: 10042 },
            { id: 'sup_T43_cofObturatorFlange4Price', label: 'T43 - –ö–û–§ –æ–±—Ç—é—Ä–∞—Ç–æ—Ä —Ñ–ª–∞–Ω–µ—Ü ‚Ññ4', type: 'number', default: 10043 },
            { id: 'sup_C28_panelAFlange1Pressure', label: 'C28 - –ü–∞–Ω–µ–ª—å –ê —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1 –¥–∞–≤–ª–µ–Ω–∏–µ', type: 'text', default: '–†—É10' },
            { id: 'sup_C29_panelAFlange2Pressure', label: 'C29 - –ü–∞–Ω–µ–ª—å –ê —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2 –¥–∞–≤–ª–µ–Ω–∏–µ', type: 'text', default: '–†—É40' },
            { id: 'sup_D28_panelAFlange1Diameter', label: 'D28 - –ü–∞–Ω–µ–ª—å –ê —Ñ–ª–∞–Ω–µ—Ü ‚Ññ1 –¥–∏–∞–º–µ—Ç—Ä', type: 'text', default: '–î—É600' },
            { id: 'sup_D29_panelAFlange2Diameter', label: 'D29 - –ü–∞–Ω–µ–ª—å –ê —Ñ–ª–∞–Ω–µ—Ü ‚Ññ2 –¥–∏–∞–º–µ—Ç—Ä', type: 'text', default: '–î—É600' }
        ]
    }
};


// No more programmatic generation - all fields defined explicitly above

// Dashboard cards configuration
const DASHBOARD_CARDS = [
    { id: 'health', title: 'üü¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã', metrics: 'healthMetrics' },
    { id: 'system', title: 'üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã', metrics: 'systemMetrics' },
    { id: 'admin', title: 'üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', content: `
        <a href="/template-upload.html" style="display:block;padding:12px 20px;background:#667eea;color:white;text-decoration:none;border-radius:8px;font-weight:600;text-align:center;">
            üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ ‚Üí
        </a>
        <p style="font-size:12px;color:#718096;margin:8px 0 0;">–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ, —Å–∫–∞—á–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ Excel —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤</p>
    `},
    { id: 'files', title: 'üìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã', metrics: 'recentFiles' }
];

// Initialize the application
document.addEventListener('DOMContentLoaded', async () => {
    renderDashboard();
    await fetchFieldMetadata();  // Fetch field metadata from API
    renderForm();
    startMetricsUpdate();
});

// Fetch field metadata including types and validation
async function fetchFieldMetadata() {
    try {
        const response = await fetch('/api/fields/metadata');
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.fields) {
                // Process metadata
                data.fields.forEach(field => {
                    FIELD_METADATA[field.id] = field;
                    if (field.enumValues) {
                        ENUM_VALUES[field.id] = field.enumValues;
                    }
                });
                console.log(`Loaded metadata for ${data.count} fields from API`);
                
                // Update field configurations with metadata
                updateFieldsWithMetadata();
            }
        } else {
            // Fallback to enum-only endpoint
            fetchEnumValues();
        }
    } catch (error) {
        console.error('Error fetching field metadata:', error);
        // Fallback to enum-only endpoint
        fetchEnumValues();
    }
}

// Fallback: Fetch enum values from API
async function fetchEnumValues() {
    try {
        const response = await fetch('/api/fields/enum');
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.fields) {
                ENUM_VALUES = data.fields;
                console.log(`Loaded ${data.count} enum fields from API (fallback)`);
                
                // Update field configurations with fetched enum values
                updateFieldsWithEnumValues();
            }
        } else {
            console.warn('Failed to fetch enum values, using defaults');
        }
    } catch (error) {
        console.error('Error fetching enum values:', error);
    }
}

// Update field configurations with metadata
function updateFieldsWithMetadata() {
    Object.values(FIELD_CONFIG).forEach(section => {
        section.fields.forEach(field => {
            const metadata = FIELD_METADATA[field.id];
            if (metadata) {
                // Update field type based on metadata
                if (metadata.type === 'enum' && metadata.enumValues) {
                    field.type = 'select';
                    field.options = metadata.enumValues;
                    field.enumField = true;
                } else if (metadata.type === 'currency') {
                    field.type = 'number';
                    field.step = '0.01';
                    field.min = '0';
                    field.currency = true;
                } else if (metadata.type === 'percentage') {
                    field.type = 'number';
                    field.min = '0';
                    field.max = '100';
                    field.percentage = true;
                } else if (metadata.type === 'email') {
                    field.type = 'email';
                } else if (metadata.type === 'url') {
                    field.type = 'url';
                } else if (metadata.type === 'date') {
                    field.type = 'date';
                }
                
                // Apply validation rules if present
                if (metadata.validation) {
                    if (metadata.validation.min !== undefined) field.min = metadata.validation.min;
                    if (metadata.validation.max !== undefined) field.max = metadata.validation.max;
                    if (metadata.validation.maxLength !== undefined) field.maxLength = metadata.validation.maxLength;
                    if (metadata.validation.pattern !== undefined) field.pattern = metadata.validation.pattern;
                }
            }
        });
    });
}

// Fallback: Update field configurations with fetched enum values
function updateFieldsWithEnumValues() {
    Object.values(FIELD_CONFIG).forEach(section => {
        section.fields.forEach(field => {
            // If this field has enum values from API, make it a select dropdown
            if (ENUM_VALUES[field.id]) {
                field.type = 'select';  // Override type to select
                field.options = ENUM_VALUES[field.id];
                field.enumField = true;  // Mark as enum for reference
            }
        });
    });
}

function renderDashboard() {
    const container = document.getElementById('dashboardCards');
    container.innerHTML = DASHBOARD_CARDS.map(card => `
        <div class="card">
            <h2>${card.title}</h2>
            ${card.content || `<div id="${card.metrics}"><div class="metric"><span class="metric-label">–ó–∞–≥—Ä—É–∑–∫–∞...</span></div></div>`}
        </div>
    `).join('');
}

function renderForm() {
    const container = document.getElementById('formSections');
    container.innerHTML = Object.entries(FIELD_CONFIG).map(([key, section]) => `
        <div class="form-section">
            <h3>${section.title}</h3>
            <div class="form-grid">
                ${section.fields.map(field => renderField(field)).join('')}
            </div>
        </div>
    `).join('');
}

function renderField(field) {
    if (field.type === 'select') {
        // Use options if available (either from enum or hardcoded fallback)
        const options = field.options || [];
        return `
            <div class="form-group">
                <label title="${field.id}">${field.label}</label>
                <select id="${field.id}">
                    ${options.length > 0 ? 
                        options.map(opt => 
                            `<option value="${opt}" ${opt === field.default ? 'selected' : ''}>${opt}</option>`
                        ).join('') :
                        `<option value="${field.default || ''}">${field.default || 'No options available'}</option>`
                    }
                </select>
            </div>
        `;
    }
    if (field.type === 'textarea') {
        return `
            <div class="form-group">
                <label title="${field.id}">${field.label}</label>
                <textarea id="${field.id}" rows="3" style="width: 100%; padding: 8px 12px; border: 1px solid #cbd5e0; border-radius: 6px; font-size: 14px; font-family: inherit; resize: vertical;">${field.default || ''}</textarea>
            </div>
        `;
    }
    
    // Build input attributes based on field metadata
    let attributes = [];
    if (field.min !== undefined) attributes.push(`min="${field.min}"`);
    if (field.max !== undefined) attributes.push(`max="${field.max}"`);
    if (field.step !== undefined) attributes.push(`step="${field.step}"`);
    if (field.maxLength !== undefined) attributes.push(`maxlength="${field.maxLength}"`);
    if (field.pattern !== undefined) attributes.push(`pattern="${field.pattern}"`);
    if (field.required) attributes.push('required');
    
    // Add visual hints for special types
    let placeholder = '';
    if (field.currency) placeholder = 'placeholder="0.00"';
    if (field.percentage) placeholder = 'placeholder="0-100"';
    if (field.type === 'email') placeholder = 'placeholder="example@email.com"';
    if (field.type === 'url') placeholder = 'placeholder="https://example.com"';
    
    return `
        <div class="form-group">
            <label title="${field.id}">
                ${field.label}
                ${field.currency ? ' <span style="color: #48bb78;">‚ÇΩ</span>' : ''}
                ${field.percentage ? ' <span style="color: #667eea;">%</span>' : ''}
            </label>
            <input type="${field.type}" id="${field.id}" value="${field.default || ''}" ${attributes.join(' ')} ${placeholder}>
        </div>
    `;
}

// API functions
async function updateMetrics() {
    try {
        const [health, metrics, files] = await Promise.all([
            fetch('/health').then(r => r.json()),
            fetch('/api/metrics').then(r => r.json()),
            fetch('/api/excel-files').then(r => r.json())
        ]);
        
        updateHealthMetrics(health);
        updateSystemMetrics(metrics);
        updateRecentFiles(files);
        updateFileList(files.files);
    } catch (error) {
        console.error('Failed to update metrics:', error);
    }
}

function updateHealthMetrics(data) {
    document.getElementById('healthMetrics').innerHTML = `
        <div class="metric"><span class="metric-label">–°—Ç–∞—Ç—É—Å</span><span class="metric-value">${data.status}</span></div>
        <div class="metric"><span class="metric-label">–í–µ—Ä—Å–∏—è</span><span class="metric-value">${data.version}</span></div>
        <div class="metric"><span class="metric-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</span><span class="metric-value">${formatUptime(data.uptime)}</span></div>
    `;
}

function updateSystemMetrics(data) {
    document.getElementById('systemMetrics').innerHTML = `
        <div class="metric"><span class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã</span><span class="metric-value">${data.queue.activeWorkers}/${data.queue.totalWorkers}</span></div>
        <div class="metric"><span class="metric-label">–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏</span><span class="metric-value">${data.queue.queuedRequests}</span></div>
        <div class="metric"><span class="metric-label">–°—Ä. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</span><span class="metric-value">${data.requests.averageResponseTime}ms</span></div>
        <div class="metric"><span class="metric-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</span><span class="metric-value">${data.requests.successRate}%</span></div>
    `;
}

function updateRecentFiles(data) {
    document.getElementById('recentFiles').innerHTML = `
        <div class="metric"><span class="metric-label">–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</span><span class="metric-value">${data.count}</span></div>
        <div class="metric"><span class="metric-label">–ü–æ—Å–ª–µ–¥–Ω–∏–π</span><span class="metric-value">${data.count > 0 ? new Date(data.files[0].created).toLocaleTimeString() : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</span></div>
    `;
}

function updateFileList(files) {
    const fileList = document.getElementById('fileList');
    if (!files || files.length === 0) {
        fileList.innerHTML = '<div style="padding:20px;text-align:center;color:#718096;">–§–∞–π–ª—ã –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</div>';
        return;
    }
    
    fileList.innerHTML = files.slice(0, 10).map(file => `
        <div class="file-item">
            <div class="file-info">
                <div class="file-name" title="${file.name}">${file.name}</div>
                <div class="file-meta">${new Date(file.created).toLocaleString()} ‚Ä¢ ${formatFileSize(file.size)}</div>
            </div>
            <div class="file-actions">
                <a href="${file.downloadUrl}" class="download-btn" download>–°–∫–∞—á–∞—Ç—å</a>
            </div>
        </div>
    `).join('');
}

async function calculateCost() {
    const loading = document.getElementById('loading');
    const errorMessage = document.getElementById('errorMessage');
    const responseArea = document.getElementById('responseArea');
    const downloadSection = document.getElementById('downloadSection');
    const progressFill = document.getElementById('progressFill');
    
    loading.classList.add('active');
    errorMessage.classList.remove('active');
    downloadSection.classList.remove('active');
    
    let progress = 0;
    const progressInterval = setInterval(() => {
        progress = Math.min(progress + 5, 90);
        progressFill.style.width = progress + '%';
    }, 200);
    
    try {
        const requestData = {};
        // Collect all field values
        Object.values(FIELD_CONFIG).forEach(section => {
            section.fields.forEach(field => {
                const el = document.getElementById(field.id);
                if (el) {
                    const value = el.value;
                    requestData[field.id] = field.type === 'number' ? (parseInt(value) || null) : value;
                }
            });
        });
        
        const response = await fetch('/api/calculate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestData)
        });
        
        const data = await response.json();
        
        clearInterval(progressInterval);
        progressFill.style.width = '100%';
        
        setTimeout(() => {
            loading.classList.remove('active');
            
            if (data.success) {
                responseArea.textContent = formatResponse(data);
                if (data.downloadUrl) {
                    document.getElementById('downloadLink').href = data.downloadUrl;
                    downloadSection.classList.add('active');
                }
            } else {
                responseArea.textContent = JSON.stringify(data, null, 2);
                errorMessage.textContent = data.error?.message || 'Calculation failed';
                errorMessage.classList.add('active');
            }
            updateMetrics();
        }, 500);
    } catch (error) {
        clearInterval(progressInterval);
        loading.classList.remove('active');
        errorMessage.textContent = 'Failed to connect to API: ' + error.message;
        errorMessage.classList.add('active');
    }
}

function formatResponse(data) {
    const fmt = n => n.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' });
    return `‚úÖ –†–ê–°–ß–ï–¢ –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù

–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${fmt(data.results.total_cost)}

–°–æ—Å—Ç–∞–≤ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:
  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${fmt(data.results.component_costs.materials)}
  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${fmt(data.results.component_costs.processing)}
  ‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${fmt(data.results.component_costs.hardware)}
  ‚Ä¢ –ü—Ä–æ—á–µ–µ: ${fmt(data.results.component_costs.other)}

–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.processing_time_ms}ms
ID –∑–∞–ø—Ä–æ—Å–∞: ${data.request_id}

–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:
${JSON.stringify(data, null, 2)}`;
}

function fillRealisticValues() {
    Object.values(FIELD_CONFIG).forEach(section => {
        section.fields.forEach(field => {
            const el = document.getElementById(field.id);
            if (el && field.default !== undefined) {
                el.value = field.default;
            }
        });
    });
}

function clearForm() {
    document.querySelectorAll('input, select, textarea').forEach(el => {
        if (el.tagName === 'SELECT') el.selectedIndex = 0;
        else el.value = '';
    });
    document.getElementById('responseArea').textContent = '–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è...';
    document.getElementById('downloadSection').classList.remove('active');
}

function formatUptime(seconds) {
    const h = Math.floor(seconds / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    return h > 0 ? `${h}h ${m}m` : m > 0 ? `${m}m ${s}s` : `${s}s`;
}

function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
}

function startMetricsUpdate() {
    updateMetrics();
    setInterval(updateMetrics, 5000);
}